<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Swift on 习七</title><link>https://it-boyer.github.io/tags/swift/</link><description>Recent content in Swift on 习七</description><generator>Hugo</generator><language>zh-cn</language><managingEditor>itboyer@qq.com (iTBoyer)</managingEditor><webMaster>itboyer@qq.com (iTBoyer)</webMaster><lastBuildDate>Sun, 13 Sep 2020 22:40:23 +0800</lastBuildDate><atom:link href="https://it-boyer.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml"/><item><title>swift 的 doom 环境</title><link>https://it-boyer.github.io/post/old/swift-%E5%9C%A8-doom-%E4%B8%AD%E7%9A%84%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</link><pubDate>Sun, 13 Sep 2020 22:40:23 +0800</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/swift-%E5%9C%A8-doom-%E4%B8%AD%E7%9A%84%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</guid><description>&lt;h2 id="安装-swift-mode"&gt;安装 swift-mode&lt;/h2&gt;
&lt;h4 id="swift-自动补齐相关插件-swift-mode"&gt;swift 自动补齐相关插件 swift-mode&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;State &amp;ldquo;DONE&amp;rdquo; from &amp;ldquo;DELEGATED&amp;rdquo; &lt;span class="timestamp-wrapper"&gt;&lt;span class="timestamp"&gt;[2019-12-11 三 09:30]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;
[终端支持 swift 自动补齐](&lt;em&gt;post/shell/终端支持 swift 自动补齐&lt;/em&gt;)&lt;br&gt;
&lt;a href="https://github.com/swift-emacs/flycheck-swift"&gt;flycheck-swift&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/nathankot/company-sourcekit"&gt;nathankot/company-sourcekit&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/swift-emacs/swift-mode"&gt;swift-emacs/swift-mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="创建可执行项目"&gt;创建可执行项目&lt;/h2&gt;
&lt;p&gt;spi &amp;ndash;type executable&lt;br&gt;
上述命令`spi`的区别是`Package.swift`不同，Source 中多一个 main.swift 文件。当 source 中存在 main.swift 时，`spx`生成的 xcodeproj 中 target 清单，会显示可执行图标。&lt;/p&gt;</description></item><item><title>创建单个 swift 可执行文件</title><link>https://it-boyer.github.io/post/old/swift-%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 13 Sep 2020 22:33:34 +0800</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/swift-%E8%84%9A%E6%9C%AC%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>&lt;h2 id="xcrun-swift-命令工具"&gt;xcrun/swift 命令工具&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;第一种&lt;br&gt;
vi test.swift&lt;br&gt;
#!/usr/bin/env xcrun swift&lt;br&gt;
print(&amp;ldquo;hello&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;$ chmod 755 test.swift&lt;br&gt;
$ ./test.swift&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二种&lt;br&gt;
$ cat &amp;laquo;EOF &amp;gt; script&lt;br&gt;
#!/usr/bin/swift&lt;br&gt;
print(&amp;ldquo;Hi!&amp;rdquo;)&lt;br&gt;
EOF&lt;br&gt;
$ chmod u+x script&lt;br&gt;
$ ./script&lt;br&gt;
Hi!&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="swift-sh-支持库依赖"&gt;swift-sh 支持库依赖&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;安装命令&lt;br&gt;
brew install swift-sh&lt;/li&gt;
&lt;li&gt;使用&lt;br&gt;
$ cat &amp;laquo;EOF &amp;gt; script&lt;br&gt;
#!/usr/bin/swift sh&lt;br&gt;
import PromiseKit // @mxcl ~&amp;gt; 6.5&lt;br&gt;
print(Promise.value(&amp;ldquo;Hi!&amp;rdquo;))&lt;br&gt;
EOF&lt;br&gt;
$ chmod u+x script&lt;br&gt;
$ ./script&lt;br&gt;
Promise(&amp;ldquo;Hi!&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;升级&lt;br&gt;
$ git clone &lt;a href="https://github.com/mxcl/swift-sh.git"&gt;https://github.com/mxcl/swift-sh.git&lt;/a&gt;&lt;br&gt;
$ cd swift-sh&lt;br&gt;
$ swift build&lt;br&gt;
把编译后的可执行文件 swift-sh，拷贝到 dotfiles/swift-sh/bin/swift-sh&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;/**&lt;br&gt;
^^Import local files &lt;a href="https://github.com/mxcl/swift-sh/issues/17"&gt;https://github.com/mxcl/swift-sh/issues/17&lt;/a&gt;&lt;br&gt;
^^ import Foobar // ./test2.swift&lt;br&gt;
^^仅支持导入由 SPM 管理的项目（Package.swift）&lt;br&gt;
^^暂时不支持 swift 文件导入方式，不能像 ruby 一样加载另一个 rb 文件&lt;br&gt;
*/&lt;/p&gt;</description></item><item><title>Guaka快速创建swift命令行CLI的工具</title><link>https://it-boyer.github.io/post/old/macOS/Guaka%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BAswift%E5%91%BD%E4%BB%A4%E8%A1%8CCLI%E7%9A%84%E5%B7%A5%E5%85%B7/</link><pubDate>Sun, 18 Nov 2018 19:10:49 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/macOS/Guaka%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BAswift%E5%91%BD%E4%BB%A4%E8%A1%8CCLI%E7%9A%84%E5%B7%A5%E5%85%B7/</guid><description>&lt;!--github库卡片--&gt;
&lt;p&gt;{% github nsomar Guaka 7d6135f width = 30% %}&lt;/p&gt;
&lt;h3&gt;Guaka介绍&lt;/h3&gt;
&lt;p&gt;通过 Guaka Framework 来实现 CLI(command-line interface)。
该框架可以快速实现如下的效果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-fallback" data-lang="fallback"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;git checkout -v &amp;#34;url&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;git&lt;/code&gt; 就是一个 &lt;strong&gt;CLI&lt;/strong&gt;，&lt;code&gt;checkout&lt;/code&gt;是这个&lt;strong&gt;CLI&lt;/strong&gt;的子命令，并接受一个&lt;code&gt; String&lt;/code&gt; 作为他的参数。&lt;/p&gt;</description></item><item><title>使用swift命令行抓取WWDC字幕</title><link>https://it-boyer.github.io/post/old/macOS/%E4%BD%BF%E7%94%A8swift%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8A%93%E5%8F%96WWDC%E5%AD%97%E5%B9%95/</link><pubDate>Sun, 18 Nov 2018 19:10:49 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/macOS/%E4%BD%BF%E7%94%A8swift%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8A%93%E5%8F%96WWDC%E5%AD%97%E5%B9%95/</guid><description>&lt;!--github库卡片--&gt;
&lt;p&gt;{% github it-boyer WWDC-Subtitles 84878dc width = 30% %}
平时没有那么大段的时间能去看这些 session 的视频，想先通过字幕能了解到 session 中的内容，所以搜罗了网上大牛抓取WWDC字幕的相关实现。&lt;/p&gt;
&lt;h2&gt;原理&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/insidegui/WWDC"&gt;WWDC客户端&lt;/a&gt;作者分享的一个开源项目&lt;a href="https://github.com/rlwimi/jonyfive"&gt;jonyfive&lt;/a&gt;是把他WWDC项目中抓取字幕文件逻辑抽取出来，就是使用 swift 做的爬虫，可以结合项目做些有趣的东西。
这边我对该项目进行了一些修改，之前下载的直接就是 vtt 的文件，并没有对文本文件进行处理，我把vtt格式调整了正常阅读的模式，方便大家阅读。&lt;/p&gt;</description></item><item><title>Swift的动态性</title><link>https://it-boyer.github.io/post/old/swift/Swift%E7%9A%84%E5%8A%A8%E6%80%81%E6%80%A7/</link><pubDate>Sat, 10 Nov 2018 09:14:55 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/swift/Swift%E7%9A%84%E5%8A%A8%E6%80%81%E6%80%A7/</guid><description>&lt;h2&gt;Foundation&lt;/h2&gt;
&lt;p&gt;Foundation 框架实现了基于运行时一个特性的两个API：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;键值编码 (key-value-coding, KVC) &lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;键值观察 (key-value observing, KVO)&lt;/code&gt;
KVC 和 KVO 允许我们将 UI 和数据进行绑定，这也是 Rx 以及其他响应式框架实现的基础。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;KVC&lt;/h3&gt;
&lt;p&gt;KVC 的工作方式如下所示：&lt;/p&gt;</description></item><item><title>swift混编及Framework和静态库的支持</title><link>https://it-boyer.github.io/post/old/swift/swift%E6%B7%B7%E7%BC%96%E5%8F%8AFramework%E5%92%8C%E9%9D%99%E6%80%81%E5%BA%93%E7%9A%84%E6%94%AF%E6%8C%81/</link><pubDate>Wed, 31 Oct 2018 21:19:06 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/swift/swift%E6%B7%B7%E7%BC%96%E5%8F%8AFramework%E5%92%8C%E9%9D%99%E6%80%81%E5%BA%93%E7%9A%84%E6%94%AF%E6%8C%81/</guid><description>&lt;h3&gt;swift和OC混编&lt;/h3&gt;
&lt;h2&gt;OC&lt;/h2&gt;
&lt;h3&gt;oc调用swift framework/swift静态库&lt;/h3&gt;
&lt;h3&gt;oc静态库调用swift/oc的framework&lt;/h3&gt;
&lt;h3&gt;oc静态库调用swift/oc的静态库&lt;/h3&gt;
&lt;h2&gt;swift&lt;/h2&gt;
&lt;h3&gt;swift调用oc/swift静态库&lt;/h3&gt;
&lt;h3&gt;swift framework调用oc/swift静态库&lt;/h3&gt;
&lt;h3&gt;swift静态库调用oc/swift静态库&lt;/h3&gt;
&lt;h3&gt;&lt;/h3&gt;</description></item><item><title>将Playground作为项目的单元测试</title><link>https://it-boyer.github.io/post/old/swift/%E5%B0%86Playground%E4%BD%9C%E4%B8%BA%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 22 Oct 2018 16:52:33 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/swift/%E5%B0%86Playground%E4%BD%9C%E4%B8%BA%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid><description>&lt;p&gt;在&lt;code&gt;Perfect&lt;/code&gt;项目中增加&lt;code&gt;playground&lt;/code&gt;：&lt;/p&gt;
&lt;h3&gt;新建&lt;code&gt;Perfect.xcodeproj&lt;/code&gt;和&lt;code&gt;PerfectPlayground&lt;/code&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;新建一个Xcode工程&lt;code&gt;Perfect&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nx"&gt;swift&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;generate&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;xcodeproj&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;设置include路径
在Xcode工程的&lt;code&gt;build settings&lt;/code&gt;中设置&lt;code&gt;SWIFT_INCLUDE_PATH&lt;/code&gt; 路径为 &lt;code&gt;${PROJECT_DIR}&lt;/code&gt;并设置&lt;code&gt;recursive&lt;/code&gt;（递归）选项。&lt;/li&gt;
&lt;li&gt;在同一工程目录下创建一个&lt;code&gt;PerfectPlayground&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;新建&lt;code&gt;Perfect.workspace&lt;/code&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;新建一个工作空间：&lt;code&gt;Perfect.workspace&lt;/code&gt;,在工作空间中添加工程和操场：&lt;code&gt;Perfect.xcodeproj&lt;/code&gt;和&lt;code&gt;PerfectPlayground&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;编译&lt;code&gt;Perfect.xcodeproj&lt;/code&gt;，这样就激活了&lt;code&gt;PerfectPlayground&lt;/code&gt;的&lt;code&gt;PerfectLib&lt;/code&gt;函数库功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-swift" data-lang="swift"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;import&lt;/span&gt; &lt;span class="nc"&gt;PerfectLib&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;json&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;{&lt;/span&gt;&lt;span class="se"&gt;\&amp;#34;&lt;/span&gt;&lt;span class="s"&gt;name&lt;/span&gt;&lt;span class="se"&gt;\&amp;#34;&lt;/span&gt;&lt;span class="s"&gt;: &lt;/span&gt;&lt;span class="se"&gt;\&amp;#34;&lt;/span&gt;&lt;span class="s"&gt;tom&lt;/span&gt;&lt;span class="se"&gt;\&amp;#34;&lt;/span&gt;&lt;span class="s"&gt;}&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jsonDecode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;u&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="bp"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;a href="https://github.com/PerfectExamples/Perfect-Playground/blob/master/README.zh_CN.md"&gt;原文Perfect-Playground&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Swift访问REST服务开发TrelloAPI</title><link>https://it-boyer.github.io/post/old/macOS/Swift%E8%AE%BF%E9%97%AEREST%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91TrelloAPI/</link><pubDate>Mon, 22 Oct 2018 08:30:26 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/macOS/Swift%E8%AE%BF%E9%97%AEREST%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%8F%91TrelloAPI/</guid><description>&lt;blockquote class="trello-card"&gt;&lt;a href="https://trello.com/c/flp0VUyv/22-swift-ios-apps-with-rest-apis%E4%B8%80https-wwwjianshucom-p-01ca73387481"&gt;(Swift) iOS Apps with REST APIs(一)https://www.jianshu.com/p/01ca73387481&lt;/a&gt;&lt;/blockquote&gt;&lt;script src="https://p.trellocdn.com/embed.min.js"&gt;&lt;/script&gt;</description></item><item><title>使用swift开发自己的命令行工具</title><link>https://it-boyer.github.io/post/old/swift/%E4%BD%BF%E7%94%A8swift%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 15 Oct 2018 19:30:26 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/swift/%E4%BD%BF%E7%94%A8swift%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid><description>&lt;!--github库卡片--&gt;
&lt;p&gt;{% github it-boyer Panagram_Final 8023350 width = 30% %}
&lt;a href="https://www.raywenderlich.com/511-command-line-programs-on-macos-tutorial"&gt;Command Line Programs on macOS Tutorial&lt;/a&gt;
&lt;a href="https://my.oschina.net/uniquejava/blog/685537?p=1"&gt;swift编写命令行工具&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;更新7/21/17:macOS教程上的命令行程序已经更新为Xcode 9和Swift 4。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;典型的Mac用户使用图形用户界面(GUI)与计算机交互。gui，顾名思义，是基于用户通过输入设备(如鼠标)与计算机进行视觉交互，通过选择或操作屏幕元素(如菜单、按钮等)。
不久前，在GUI出现之前，命令行接口(CLI)还是与计算机交互的主要方法。CLIs是基于文本的接口，用户可以在其中输入要执行的程序名，后面跟着参数。
尽管gui很流行，命令行程序仍然在当今的计算世界中扮演着重要的角色。命令行程序(如&lt;code&gt;ImageMagick&lt;/code&gt;或&lt;code&gt;ffmpeg&lt;/code&gt;)在服务器世界中非常重要。事实上，大多数形成Internet的服务器只运行命令行程序。
甚至Xcode也使用命令行程序!当Xcode构建项目时，它调用xcodebuild，它执行实际的构建。如果构建过程被嵌入到Xcode产品中，持续集成解决方案将很难实现，如果不是不可能的话!&lt;/p&gt;</description></item><item><title>Swift调用AppleScript脚本和Shell脚本</title><link>https://it-boyer.github.io/post/old/swift/Swift%E8%B0%83%E7%94%A8AppleScript%E8%84%9A%E6%9C%AC%E5%92%8CShell%E8%84%9A%E6%9C%AC/</link><pubDate>Mon, 15 Oct 2018 17:22:37 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/swift/Swift%E8%B0%83%E7%94%A8AppleScript%E8%84%9A%E6%9C%AC%E5%92%8CShell%E8%84%9A%E6%9C%AC/</guid><description>&lt;p&gt;当想让自己的app支持播放，但有没有足够的时间来开发自己的播放器，可以先考虑用mpv播放器来实现相关功能，这是AppleScript作为互通的桥梁。&lt;/p&gt;</description></item></channel></rss>