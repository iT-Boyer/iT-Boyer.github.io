<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>API on 习七</title><link>https://it-boyer.github.io/tags/API/</link><description>Recent content in API on 习七</description><generator>Hugo</generator><language>zh-cn</language><managingEditor>itboyer@qq.com (iTBoyer)</managingEditor><webMaster>itboyer@qq.com (iTBoyer)</webMaster><lastBuildDate>Sun, 24 Sep 2017 18:21:38 +0000</lastBuildDate><atom:link href="https://it-boyer.github.io/tags/API/index.xml" rel="self" type="application/rss+xml"/><item><title>GCD底层并发API</title><link>https://it-boyer.github.io/post/old/iOS/GCD%E5%BA%95%E5%B1%82%E5%B9%B6%E5%8F%91API/</link><pubDate>Sun, 24 Sep 2017 18:21:38 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/iOS/GCD%E5%BA%95%E5%B1%82%E5%B9%B6%E5%8F%91API/</guid><description>&lt;p&gt;这篇文章里，我们将会讨论一些 iOS 和 OS X 都可以使用的底层 API。除了 &lt;code&gt;dispatch_once&lt;/code&gt; ，我们一般不鼓励使用其中的任何一种技术。&lt;/p&gt;
&lt;p&gt;但是我们想要揭示出表面之下深层次的一些可利用的方面。这些底层的 API 提供了大量的灵活性，随之而来的是大量的复杂度和更多的责任。在我们的文章&lt;a href="http://objccn.io/issue-2-2/"&gt;常见的后台实践&lt;/a&gt;中提到的高层的 API 和模式能够让你专注于手头的任务并且免于大量的问题。通常来说，高层的 API 会提供更好的性能，除非你能承受起使用底层 API 带来的纠结于调试代码的时间和努力。&lt;/p&gt;</description></item><item><title>UIStackView教程了解StackView</title><link>https://it-boyer.github.io/post/old/iOS/UI/UIStackView%E6%95%99%E7%A8%8B%E4%BA%86%E8%A7%A3StackView/</link><pubDate>Fri, 24 Feb 2017 18:12:14 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/iOS/UI/UIStackView%E6%95%99%E7%A8%8B%E4%BA%86%E8%A7%A3StackView/</guid><description>&lt;p&gt;&lt;a href="http://blog.csdn.net/kmyhy/article/details/50456444"&gt;原地址&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;UIStackView简单介绍&lt;/h2&gt;
&lt;p&gt;一个Stack View能够将它所含的View以各种方式沿其轴向进行分布，同时也可以将View沿某个方向等距分布，要隐藏&lt;code&gt;Stack View&lt;/code&gt;中的视图，你只需要设置该View的&lt;code&gt;Hidden&lt;/code&gt;属性为&lt;code&gt;true&lt;/code&gt;，剩下的工作Stack View会自己完成。。
坐标（Axis）、间隔（Spacing）、对齐（Alignment）以及分布（Distribution ）等。
distribution属性：决定Stack View如何沿它轴向的水平方向摆放它的subview，当属性值是Fill，这表示subview会沿轴向完全占据Stack View。因此，Stack View会拉伸其中一个subview使其填充剩余空间，尤其是水平内容优先级最低的那个，如果所有subview优先级相同，则拉伸第一个subview。
Alignment属性：决定了Stack View如何沿它轴向的垂直方向摆放它的subview，对于一个垂直的Stack View，这个属性可以设置为Fill、Leading、Center和Trailing。
对于水平的Stack View，这个属性则稍有不同：
.Top取代了.Leading，.Bottom取代了.Trailing。此外，水平Stack View还多出了两个属性值：.FirstBaseLine和.LastBaseLine。
对于水平的Stack View，这个属性则稍有不同：
Fill:
Leading:
Center:
Trailing:&lt;/p&gt;</description></item><item><title>UIImage的渲染模式</title><link>https://it-boyer.github.io/post/old/iOS/UI/UIImage%E7%9A%84%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%BC%8F/</link><pubDate>Thu, 26 Nov 2015 16:15:11 +0800</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/iOS/UI/UIImage%E7%9A%84%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%BC%8F/</guid><description>&lt;p&gt;设置UIImage的渲染模式：UIImage.renderingMode
在 iOS 7 中 UIImage 添加了一个 &lt;code&gt;renderingMode&lt;/code&gt; 属性。我们可以使用 &lt;code&gt;imageWithRenderingMode:&lt;/code&gt;并传入一个合适的&lt;code&gt;UIImageRenderingMode&lt;/code&gt; 来指定这个 image 要不要以 Template 的方式进行渲染。&lt;/p&gt;</description></item><item><title>TextKit之便笺实战</title><link>https://it-boyer.github.io/post/old/iOS/UI/TextKit%E4%B9%8B%E4%BE%BF%E7%AC%BA%E5%AE%9E%E6%88%98/</link><pubDate>Thu, 03 Jul 2014 17:29:00 +0800</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/iOS/UI/TextKit%E4%B9%8B%E4%BE%BF%E7%AC%BA%E5%AE%9E%E6%88%98/</guid><description>&lt;h2&gt;便笺练习功能点:&lt;/h2&gt;
&lt;p&gt;通过实现以下特效，练习并掌握布局管理器（layout manger），文本容器（text containers）和文本存储器（text storage）等用法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;动态样式（Dynamic type）&lt;/li&gt;
&lt;li&gt;凸版印刷效果（Letterpress effects）&lt;/li&gt;
&lt;li&gt;环绕路径（Exclusion paths）&lt;/li&gt;
&lt;li&gt;动态文本格式及存储（Dynamic text formatting and storage）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个应用中我们将实现回流文本，字体大小的动态变换，以及闪回文本等效果。
效果图:&lt;br&gt;
&lt;img src="https://it-boyer.github.io/images/bianqian.png" alt="image"&gt;&lt;br&gt;
App开始运行后自动生成一组便笺实例并利用&lt;code&gt;tableViewController&lt;/code&gt;显示出来。&lt;code&gt;Storyboards&lt;/code&gt;和&lt;code&gt;segues&lt;/code&gt;会将被选中的单元格所对应的便笺内容显示出来以供用户编辑。
项目开发包：&lt;a href="http://cdn4.raywenderlich.com/wp-content/uploads/2013/09/TextKitNotepad-starter.zip"&gt;Notepad.zip&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;动态样式&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;动态样式（Dynamic type）&lt;/code&gt;是iOS 7里面变化最大的特性之一; 它使得app可以遵从用户选择的字体大小和粗细。
选择 &lt;strong&gt;通用-&amp;gt;文字大小&lt;/strong&gt; 或 &lt;strong&gt;通用-&amp;gt;辅助功能&lt;/strong&gt; 来查看app中的字体设置。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://it-boyer.github.io/images/UserTextPreferences.png" alt="image"&gt;&lt;br&gt;
iOS 7 支持通过&lt;code&gt;粗体&lt;/code&gt;、&lt;code&gt;设置字体大小&lt;/code&gt;等方式提高支持动态文本的应用的易读性。
例如**&lt;code&gt;UIFont&lt;/code&gt;**新增的一个方法： &lt;strong&gt;&lt;code&gt;preferredFontForTextStyle&lt;/code&gt;&lt;/strong&gt; 用来根据用户对字体大小的设置来自动制定字体样式。&lt;br&gt;
下面表格中是六种可用字体样式的示例：&lt;br&gt;
&lt;img src="https://it-boyer.github.io/images/TextStyles.png" alt="image"&gt;&lt;br&gt;
最左边一列是最小字体；中间一列是最大字体；最右边一列是粗体效果。&lt;/p&gt;
&lt;h3&gt;使用系统动态字体样式&lt;/h3&gt;
&lt;p&gt;使用动态文本，是通过给&lt;code&gt;文本字体&lt;/code&gt;设置字体样式&lt;strong&gt;style&lt;/strong&gt;而不是指定具体的&lt;code&gt;字体名称&lt;/code&gt;和&lt;code&gt;大小&lt;/code&gt;。这样，系统会在运行时自动根据这一样式以及用户的字体大小设置来选择使用合适的字体。&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;preferredFontForTextStyle:&lt;/code&gt;方法设置字体样式&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;code&gt;NoteEditorViewController.m/swift&lt;/code&gt; 在&lt;code&gt;viewDidLoad：&lt;/code&gt;方法实现的最后面加入以下代码：
{%codeblock lang:objc%}
self.textView.font = [UIFont preferredFontForTextStyle:UIFontTextStyleBody];
{%endcodeblock%}
{% codeblock lang:swift %}
self.textView.font = UIFont.preferredFont(forTextStyle: .body)
{% endcodeblock %}&lt;/li&gt;
&lt;li&gt;打开 &lt;code&gt;NotesListViewController.m/swift&lt;/code&gt; 在 &lt;code&gt;tableView:cellForRowAtIndexPath:&lt;/code&gt; 方法中增加如下代码:
{%codeblock lang:objc%}
cell.textLabel.font = [UIFont preferredFontForTextStyle:UIFontTextStyleHeadline];
{%endcodeblock%}
{% codeblock lang:swift %}
cell.textLabel?.font = UIFont.preferredFont(forTextStyle: .headline)
{% endcodeblock %}
上面两行代码都用到了新版iOS的字体样式.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;字体样式：通过语义法命名字体，例如 &lt;code&gt;UIFontTextStyleSubHeadline&lt;/code&gt;, 可以避免在代码里每一处都指定具体的字体名称和样式， 而且确保app能对用户的字体大小设置做出恰当的回应。&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4&gt;APP响应用户字体设置&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;设置系统字体
返回到&lt;strong&gt;通用-&amp;gt;文字大小&lt;/strong&gt;重新修改字体设置.
再运行App, &lt;strong&gt;Note&lt;/strong&gt;页面的文字大小是当前设定的字体大小；前后截屏对比,分辨率小了一半。&lt;br&gt;
&lt;img src="https://it-boyer.github.io/images/NotepadWithDynamicType.png" alt="image"&gt;&lt;/li&gt;
&lt;li&gt;设置系统字体生效
当我们返回到&lt;strong&gt;通用-&amp;gt;文字大小&lt;/strong&gt;重新修改字体设置. 再打开&lt;strong&gt;Note&lt;/strong&gt;页面, 会发现app并没有&lt;strong&gt;立即&lt;/strong&gt;对字体设置的变化做出相应反应。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;监听系统通知：实现APP响应用户字体设置&lt;/h5&gt;
&lt;p&gt;当用户修改了他们的字体大小设置之后，这一样式对应的字体并不会自动更新，必须重新请求才能获取新的值。用户设置变化后，&lt;code&gt;preferredFontForTextStyle:&lt;/code&gt;方法返回的字体也会变化。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加监听系统通知&lt;code&gt;UIContentSizeCategoryDidChangeNotification&lt;/code&gt;通知APP响应用户字体设置的变化
打开 &lt;code&gt;NoteEditorViewController.m&lt;/code&gt; 并在 &lt;code&gt;viewDidLoad&lt;/code&gt; 方法的实现的最后加入以下代码：
{%codeblock lang:objc%}
[[NSNotificationCenter defaultCenter]
addObserver:self
selector:@selector(preferredContentSizeChanged:)
name:UIContentSizeCategoryDidChangeNotification
object:nil];
{%endcodeblock%}
{%codeblock lang:swift%}
//字体变化通知:调用preferredContentSizeChanged:方法
NotificationCenter.default.addObserver(self, selector: #selector(NoteEditorViewController.preferredContentSizeChanged(_:)), name: NSNotification.Name.UIContentSizeCategoryDidChange, object: nil)
{%endcodeblock%}&lt;/li&gt;
&lt;li&gt;添加系统通知响应事件
收到用于指定本类接收字体设定变化的通知后，调用&lt;code&gt;preferredContentSizeChanged:&lt;/code&gt;方法
在&lt;code&gt;NoteEditorViewController.m&lt;/code&gt;中&lt;code&gt;viewDidLoad&lt;/code&gt;方法之后紧接着添加以下方法：
{%codeblock lang:objc%}&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;(void)preferredContentSizeChanged:(NSNotification *)notification
{
self.textView.font = [UIFont preferredFontForTextStyle:UIFontTextStyleBody];
}
{%endcodeblock%}
{%codeblock lang:swift %}
//字体变化通知时调用
func preferredContentSizeChanged(_ notification:NSNotification)
{
self.textView.font = UIFont.preferredFont(forTextStyle: .body)
}
{%endcodeblock%}
这一方法作用是根据新的字体设置来设定&lt;code&gt;textView&lt;/code&gt;中的字体。 &lt;br&gt;
Build并运行app，修改字体大小设置，Note页面就可以即时更新字体大小了。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>iOS Document Interaction 编程指南</title><link>https://it-boyer.github.io/post/old/iOS/iOSDocumentInteraction%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</link><pubDate>Tue, 01 Jul 2014 23:12:01 +0800</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/iOS/iOSDocumentInteraction%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</guid><description>&lt;h4&gt;关于 Document Interaction&lt;/h4&gt;
&lt;p&gt;iOS支持在你的app中通过调用其他app来预览和显示文档。iOS还支持文件关联，允许其他app调用你的app打开文件。这些技术包括了UIKit中提供的&lt;a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDocumentInteractionController_class/Reference/Reference.html"&gt;UIDocumentInteractionController&lt;/a&gt;类，以及&lt;a href="https://developer.apple.com/library/ios/documentation/QuickLook/Reference/QuickLookFrameworkReference_iPhoneOS/_index.html"&gt;Quick Look&lt;/a&gt;框架。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;######预览文档和呈现选项菜单&lt;br&gt;
如果app需要打开自身并不支持的文件时，就需要使用&lt;strong&gt;UIDocumentInteractionController&lt;/strong&gt;。一个&lt;strong&gt;document interaction controller&lt;/strong&gt;通过&lt;strong&gt;Quick Look框架&lt;/strong&gt;判断文档是否能被另一个app打开和预览。也就是说，app可以通过&lt;strong&gt;documentinteraction controller&lt;/strong&gt;提供一些支持打开该文件方式的菜单。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体实现需要以下步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;需要通过其他APP打开的文件，来实例化&lt;code&gt;UIDocumentInteractionController&lt;/code&gt;实例对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;在自己的APP UI中提供一个代表这种文件的图像标（一般显示文件名或者图标）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;用户交互，如触摸这个控件，则调用&lt;code&gt;documentinteractioncontroller&lt;/code&gt;对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;三种交互界面:
1. 预览文件的内容。
2. 一个包含预览和打开操作的菜单。可以通过实现某些委托方法，向菜单中加入其他操作，比如复制、打印。
3. 一个菜单，仅包含“以其它方式打开”操作。&lt;/p&gt;
&lt;p&gt;同时，&lt;code&gt;documentinteractioncontroller&lt;/code&gt;内置了一些手势，必要时可以直接实现它们。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;######使用&lt;code&gt;documentinteractioncontroller&lt;/code&gt;的场景:&lt;strong&gt;与文件交互的app都可以使用。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;需要从网络下载文件的APP:&lt;br&gt;
例如，email程序需要打开和预览邮件附件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;不下载文件的APP:&lt;br&gt;
例如，APP需要支持文件共享（参考“File-Sharing Support” in &lt;a href="https://developer.apple.com/library/ios/documentation/Miscellaneous/Conceptual/iPhoneOSTechOverview/Introduction/Introduction.html#//apple_ref/doc/uid/TP40007898"&gt;iOS Technology Overview&lt;/a&gt;), 即可以对同步到app Documents/Shared目录下的文件使用&lt;code&gt;documentinteractioncontroller&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>IOS7新宠TextKit</title><link>https://it-boyer.github.io/post/old/iOS/UI/IOS7%E6%96%B0%E5%AE%A0TextKit/</link><pubDate>Mon, 16 Jun 2014 22:24:48 +0800</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/iOS/UI/IOS7%E6%96%B0%E5%AE%A0TextKit/</guid><description>&lt;h2&gt;Text Kit&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Text Kit&lt;/code&gt;&lt;/strong&gt;：是个庞大的framework，继承了&lt;code&gt;Core Text&lt;/code&gt;的全部功能，构建了快速、先进的文本排版和渲染引擎，更让开发者们高兴的是，设计者把它封装在了一个面向对象的API中。并且与UIKit框架很好的集成，它让程序能够通过&lt;strong&gt;NSTextStorage&lt;/strong&gt;对象存储文本排版和显示文本等主要信息，并支持排版所需要的所有特性，包括字距调整、连写、换行和对齐等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;font size=3&gt;更直观的理解，&lt;strong&gt;UITextView&lt;/strong&gt;，&lt;strong&gt;UITextField&lt;/strong&gt;、&lt;strong&gt;UILabel&lt;/strong&gt;等UIKit控件都已经基于&lt;strong&gt;Text Kit&lt;/strong&gt;重新构建，是为UIKit框架提供高质量排版服务而扩展的一些类和协议.&lt;br&gt;
例如：NSTextStorage对象，它本身是&lt;strong&gt;NSMutableAttributedString&lt;/strong&gt;的子类，支持分批编辑，这就意味着在改变一个范围内的字符样式时，不用整体替换文本内容，就能完成排版效果。其中支持分页文本、文本包装、富文本编辑、交互式文本着色、文本折叠和自定义截取等特性。&lt;/font&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;IOS6之前，想实现一些丰富的文本排版，例如在textView中显示不同样式的文本，或者图片和文字混排等，就需要借助于UIWebView或者深入研究一下&lt;code&gt;Core Text&lt;/code&gt;。后来iOS6，增加一个很棒的属性:&lt;code&gt;NSAttributedString&lt;/code&gt;，主要用于支持UILabel、UITextField、UITextView等UIKit控件自主排版的功能。很显然，IOS7并没有满足于这一改进，同时推出一款功能更为齐全，易用的&lt;code&gt;Text Kit&lt;/code&gt;新宠。&lt;br&gt;
在iOS 6中, 用于文本的UIKit控件是基于WebKit和Core Graphics的字符串绘制方法来实现的。如下面层级体系图所示：&lt;br&gt;
iOS 7的整体构架要更清晰，所有基于文本的UIKit控件（除了UIWebView）现在都可以使用Text Kit，如下图所示：&lt;/p&gt;</description></item></channel></rss>