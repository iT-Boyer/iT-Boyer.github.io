<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>调试 on 习七</title><link>https://it-boyer.github.io/tags/%E8%B0%83%E8%AF%95/</link><description>Recent content in 调试 on 习七</description><generator>Hugo</generator><language>zh-cn</language><managingEditor>itboyer@qq.com (iTBoyer)</managingEditor><webMaster>itboyer@qq.com (iTBoyer)</webMaster><lastBuildDate>Fri, 09 Nov 2018 13:05:46 +0000</lastBuildDate><atom:link href="https://it-boyer.github.io/tags/%E8%B0%83%E8%AF%95/index.xml" rel="self" type="application/rss+xml"/><item><title>Chisel-xcodeproj框架的使用</title><link>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/Chisel-xcodeproj%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 09 Nov 2018 13:05:46 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/Chisel-xcodeproj%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>&lt;!--github库卡片--&gt;
&lt;p&gt;{% github it-boyer chisel f331dc6 width = 30% %}
这个pull请求添加&lt;code&gt;findinstances命令&lt;/code&gt;，该命令完成&lt;a href="https://github.com/facebook/chisel/pull/197"&gt;Add findinstances, and new support framework in Chisel.xcodeproj &lt;/a&gt;和&lt;a href="https://github.com/facebook/chisel/pull/214"&gt;Add Makefile for installing framework&lt;/a&gt;的工作。
用户可以运行&lt;code&gt;help findinstances&lt;/code&gt;获取&lt;code&gt;findinstances&lt;/code&gt;的详细信息。简要总结一下，&lt;code&gt;findinstances&lt;/code&gt;可以找到给定&lt;code&gt;class&lt;/code&gt;类或&lt;code&gt;protocol&lt;/code&gt;协议的所有实例，并使用谓词表达式过滤这些结果。
如果您有一个名为&lt;code&gt;XXSocialUser&lt;/code&gt;的类，那么您可以通过运行&lt;code&gt;findinstances XXSocialUser == 'curry'&lt;/code&gt;来找到一个特定的用户。&lt;/p&gt;</description></item><item><title>基于Chisel自定义python调试命令</title><link>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/%E5%9F%BA%E4%BA%8EChisel%E8%87%AA%E5%AE%9A%E4%B9%89python%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4/</link><pubDate>Sun, 21 Oct 2018 09:03:35 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/%E5%9F%BA%E4%BA%8EChisel%E8%87%AA%E5%AE%9A%E4%B9%89python%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4/</guid><description>&lt;!--github库卡片--&gt;
&lt;p&gt;{% github it-boyer chisel 56d0e0d width = 30% %}&lt;/p&gt;
&lt;h2&gt;管理.lldbinit&lt;/h2&gt;
&lt;p&gt;.lldbinit每次启动Xcode 都会加载lldb环境，故当自定义命令写好之后，可以通过这里加载。&lt;/p&gt;</description></item><item><title>xcode调试中引用python脚本</title><link>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/xcode%E8%B0%83%E8%AF%95%E4%B8%AD%E5%BC%95%E7%94%A8python%E8%84%9A%E6%9C%AC/</link><pubDate>Wed, 17 Oct 2018 19:47:15 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/xcode%E8%B0%83%E8%AF%95%E4%B8%AD%E5%BC%95%E7%94%A8python%E8%84%9A%E6%9C%AC/</guid><description>&lt;p&gt;Xcode集成了LLDB，进一步简化了程序调试流程。虽然LLDB很强大，但是它的命令很有限。所幸的是，lldb包含了对python的支持，使得lldb的拓展成为可能。本人在开发过程中很喜欢使用image lookup 命令，但是苦于每次只能执行一条，相当耗时，因此一直想要找到一种批量执行的方法&lt;/p&gt;</description></item><item><title>Instrument使用Signposts工具</title><link>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/Instrument%E4%BD%BF%E7%94%A8Signposts%E5%B7%A5%E5%85%B7/</link><pubDate>Tue, 02 Oct 2018 23:19:55 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/Instrument%E4%BD%BF%E7%94%A8Signposts%E5%B7%A5%E5%85%B7/</guid><description>&lt;h2&gt;引言&lt;/h2&gt;
&lt;p&gt;性能是实现卓越的用户体验的关键之一。当应用或者游戏表现的运行迅速，反应灵敏时，用户会更喜欢。但是软件是很复杂的，当你的应用视图做某事时，例如只是点了一个按钮，但程序也有可能做了很多的事情，这就意味着你可以在一些看似不太可能的地方找到一些优化点。但这样做，挖掘性能的优化点，有时就需要深入理解你的程序正在做些什么。它需要您知道代码什么时候执行的，以及特定的操作需要多长时间。所以这就体验出来了有一个好的测试工具是多么的重要。&lt;/p&gt;</description></item><item><title>使用LLDB独立调试APP</title><link>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/%E4%BD%BF%E7%94%A8LLDB%E7%8B%AC%E7%AB%8B%E8%B0%83%E8%AF%95APP/</link><pubDate>Wed, 05 Sep 2018 14:03:39 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/%E4%BD%BF%E7%94%A8LLDB%E7%8B%AC%E7%AB%8B%E8%B0%83%E8%AF%95APP/</guid><description>&lt;h2&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://lldb.llvm.org"&gt;lldb官方文档&lt;/a&gt;
&lt;a href="https://developer.apple.com/library/content/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-terminal-workflow-tutorial.html#//apple_ref/doc/uid/TP40012917-CH4-SW2"&gt;苹果文档&lt;/a&gt;
&lt;a href="https://southpeak.github.io/2015/01/25/tool-lldb/"&gt;LLDB调试器使用简介 南峰子译&lt;/a&gt;
&lt;a href="http://www.cocoachina.com/ios/20150330/11435.html"&gt;调试：案例学习&lt;/a&gt;
&lt;a href="http://www.jianshu.com/p/09a4c1f7c732"&gt;系统翻译文章&lt;/a&gt;
&lt;a href="http://codedigging.com/blog/2016-04-27-debugging-ios-binaries-with-lldb/"&gt;Debugging iOS binaries with LLDB&lt;/a&gt;
&lt;a href="https://www.jianshu.com/p/2d4083d27653"&gt;高级LLDB调试&lt;/a&gt;
&lt;a href="https://www.jianshu.com/p/381d2d232ec1"&gt;LLDB中使用python概览&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;善用LLDB&lt;/h2&gt;
&lt;p&gt;如果想断点到某种场景，不是先随意打个断点然后一直单步到出问题的那行代码，最佳的做法是充分利用LLDB的特性以一次性定位到你所感兴趣的代码。&lt;/p&gt;</description></item><item><title>Thisdeviceisnotcurrentlyonline</title><link>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/Thisdeviceisnotcurrentlyonline/</link><pubDate>Fri, 31 Aug 2018 16:58:22 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/Thisdeviceisnotcurrentlyonline/</guid><description>&lt;p&gt;&lt;a href="https://forums.developer.apple.com/thread/16242"&gt;参考&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;you can restart your device! then connect your device to your mac-&amp;gt;open Xcode-&amp;gt;press command + i&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;ve encountered this issue today. The record button is disabled and the tooltip says &amp;ldquo;This device is not currently online&amp;rdquo;. However my iPhone is connecting with my Mac and can be debugged with Xcode without any problem.&lt;/p&gt;</description></item><item><title>使用Instruments的工具</title><link>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/%E4%BD%BF%E7%94%A8Instruments%E7%9A%84%E5%B7%A5%E5%85%B7/</link><pubDate>Fri, 31 Aug 2018 16:58:22 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/%E4%BD%BF%E7%94%A8Instruments%E7%9A%84%E5%B7%A5%E5%85%B7/</guid><description>&lt;p&gt;检测app内存爆增代码，优化性能
&lt;a href="https://www.jianshu.com/p/d0e149332380"&gt;Instruments工具使用办法&lt;/a&gt;
整理Demo，列出几种常用instrument的场景。来熟悉具体操作
&lt;a href="https://gitee.com/leiming97/MemoryProblems-master.git"&gt;demo&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;集成归档模块代码，测试内存上升问题&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Chisel-LLDB命令插件</title><link>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/Chisel-LLDB%E5%91%BD%E4%BB%A4%E6%8F%92%E4%BB%B6/</link><pubDate>Fri, 31 Aug 2018 16:20:20 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/Chisel-LLDB%E5%91%BD%E4%BB%A4%E6%8F%92%E4%BB%B6/</guid><description>&lt;!--github库卡片--&gt;
&lt;p&gt;{% github facebook chisel 56d0e0d width = 30% %}&lt;/p&gt;
&lt;p&gt;LLDB 是一个有着 REPL 的特性和 C++ ,Python 插件的开源调试器。LLDB 绑定在 Xcode 内部，存在于主窗口底部的控制台中。调试器允许你在程序运行的特定时暂停它，你可以查看变量的值，执行自定的指令，并且按照你所认为合适的步骤来操作程序的进展。(这里有一个关于调试器如何工作的总体的解释。)&lt;/p&gt;</description></item><item><title>LLDB命令使用</title><link>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/LLDB%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 31 Aug 2018 16:20:20 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/LLDB%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</guid><description>&lt;!--github库卡片--&gt;
&lt;p&gt;{% github it-boyer width = 30% %}&lt;/p&gt;
&lt;h3&gt;help&lt;/h3&gt;
&lt;p&gt;最简单命令是 help，它会列举出所有的命令。如果你忘记了一个命令是做什么的，或者想知道更多的话，你可以通过 help &lt;command&gt; 来了解更多细节，例如 help print 或者 help thread。如果你甚至忘记了 help 命令是做什么的，你可以试试 help help。不过你如果知道这么做，那就说明你大概还没有忘光这个命令。&lt;/p&gt;</description></item><item><title>使用Safari浏览器调试WebView</title><link>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/%E4%BD%BF%E7%94%A8Safari%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95WebView/</link><pubDate>Thu, 23 Aug 2018 13:34:25 +0000</pubDate><author>itboyer@qq.com (iTBoyer)</author><guid>https://it-boyer.github.io/post/old/%E8%B0%83%E8%AF%95/%E4%BD%BF%E7%94%A8Safari%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95WebView/</guid><description>&lt;!--github库卡片--&gt;
&lt;p&gt;{% github it-boyer width = 30% %}&lt;/p&gt;
&lt;h3&gt;使用RxSwift开发爬虫工具&lt;/h3&gt;
&lt;h3&gt;设置真机&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;首先打开模拟器或者真机设置中&amp;quot;Safari浏览器&amp;quot;→&amp;ldquo;高级&amp;rdquo;→&amp;ldquo;Web检查器&amp;quot;的开关。&lt;/li&gt;
&lt;li&gt;然后我们打开Mac电脑的Safari浏览器,打开系统偏好设置(快捷键 commond + ,)，点击菜单中的&amp;quot;高级&amp;rdquo;,然后勾选&amp;quot;在菜单栏中显示&amp;quot;开发&amp;quot;菜单&amp;quot;.方便我们进行快速的调试。&lt;/li&gt;
&lt;li&gt;这时候真机连接上数据线.或者开启模拟器就能在菜单栏&amp;quot;开发&amp;quot;选项中找到我们的设备或者是模拟器.&lt;/li&gt;
&lt;li&gt;接下来我们只需要跑起我们的工程进入对应的WebView页面即可进行调试.&lt;/li&gt;
&lt;/ol&gt;</description></item></channel></rss>